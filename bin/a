#!/usr/bin/env ruby

require 'optparse'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-V|l] COMMAND DIR"

  opts.on('-V', '--verbose', 'Print more info') { |v| options[:verbose] = v }

  opts.on('-v', '--version', 'Print version info') { |v| options[:version] = v }

  opts.on('-l', '--list', 'Get a list of COMMAND') { |v| options[:list] = v }
end.parse!

EXAMPLE_STR = %[example:
a gem mytest
will create new gem project named mytest directory.]

DIR_ERROR_STR = %[Must have a target dir
for example: a gem mytest]

TARGET_ERROR_STR = "Here is a list of target you can use:\n"

#ex: gem
def target
  unless ARGV.first
    puts(EXAMPLE_STR)
    exit(1)
  end
  ARGV.first.capitalize
end

#ex: mytest
def dir
  dir = ARGV.last
  unless dir
    puts(DIR_ERROR_STR)
    exit(2)
  end
  dir
end

def list_targets(targets_path)
  entries = Dir.entries(targets_path).keep_if { |e| e.include?('.rb') }
  entries.map! { |e| File.basename(e, '.rb') }
end

# ex: gem # Generates a Ruby gems project tree.
def print_targets(targets_path)
    list_targets(targets_path).each { |e| puts(e + " #{File.read("#{targets_path}/#{e}.rb").split("\n").first}") }
end

def main(options)
  targets_dir = 'commands'
  targets_path = File.join("#{Dir.home}/.config/a/#{targets_dir}/")

  if options[:list]
    print_targets(targets_path)
    exit
  end

  if options[:version]
    require_relative '../lib/version'
    $stderr.puts(A::VERSION)
    exit
  end

  begin 
    require_relative targets_path + target.downcase
  rescue LoadError
    puts(%[The target "#{target}" does not exist!\n] + TARGET_ERROR_STR)
    print_targets(targets_dir)
    exit(4)
  end

  A::Gem.new(dir: dir, target: target, verbose: options[:verbose])
end

main(options)
